import base64
import queue
import subprocess
import sys
import threading
import time
import ffmpeg
import cv2
import numpy

print("Initializing subprocess")
# p = subprocess.Popen(
#     ["C:/Users/farha/amazonkvswebrtc2/build/samples/kvsWebrtcClientViewerGstSample", "FishTankWebrtc", "video-only"],
#     stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)


ffmpeg_cmd = (
    ffmpeg
    .input("pipe:0", format='h264', fflags='nobuffer')
    .output('pipe:1', format='rawvideo', pix_fmt='bgr24')
    .compile()
)

initialFrame = "AAAAAQkQAAAAAWdCwB/aAUAW7AWoCAgKAAADAAIAAAMABR4wZUAAAAABaM48gAAAAAEGBf//tdxF6b3m2Ui3lizYINkj7u94MjY0IC0gY29yZSAxNTcgcjJNIDQ1MWZiODYgLSBILjI2NC9NUEVHLTQgQVZDIGNvZGVjIC0gQ29weWxlZnQgMjAwMy0yMDE4IC0gaHR0cDovL3d3dy52aWRlb2xhbi5vcmcveDI2NC5odG1sIC0gb3B0aW9uczogY2FiYWM9MCByZWY9MSBkZWJsb2NrPTE6MDowIGFuYWx5c2U9MHgxOjB4MTExIG1lPWhleCBzdWJtZT0yIHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVmPTAgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0wIDh4OGRjdD0wIGNxbT0wIGRlYWR6b25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PTAgdGhyZWFkcz04IGxvb2thaGVhZF90aHJlYWRzPTggc2xpY2VkX3RocmVhZHM9MSBzbGljZXM9OCBucj0wIGRlY2ltYXRlPTEgaW50ZXJsYWNlZD0wIGJsdXJheV9jb21wYXQ9MCBjb25zdHJhaW5lZF9pbnRyYT0wIGJmcmFtZXM9MCB3ZWlnaHRwPTAga2V5aW50PTEwIGtleWludF9taW49MSBzY2VuZWN1dD00MCBpbnRyYV9yZWZyZXNoPTAgcmNfbG9va2FoZWFkPTAgcmM9Y2JyIG1idHJlZT0wIGJpdHJhdGU9NTEyIHJhdGV0b2w9MS4wIHFjb21wPTAuNjAgcXBtaW49MCBxcG1heD02OSBxcHN0ZXA9NCB2YnZfbWF4cmF0ZT01MTIgdmJ2X2J1ZnNpemU9NTEyIG5hbF9ocmQ9bm9uZSBmaWxsZXI9MCBpcF9yYXRpbz0xLjQwIGFxPTE6MS4wMACAAAAAAWWIhAav///D0UAAVefJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJ1111111111111111111111111111111111111111111111111111111111111111111111111111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XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXgAAAAAWUAbiIhAav///D0UAAVefJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJ11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111114AAAAAWUAKoiIQGr///w9FAAFXnycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJyddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddcdEAAICFaxjGta1jGNaz//gAPDHDmMXIjqNsXcPSf+4k5FDsIcABj0EM09coHKNrqf2iAGKn+mwEBgf31KVgAV4AAgJ2eAEVWAATIpxgYukAUgJs2Wg4SlH/yQTuRUAWrAdZrEKBfgPZe34O4pURCTXwf/XXDUwOK4dwDnIN5rqAx6YIFQ0MqG9T7vsCZNsPk0VMv+7wNYCQlZUUJbIe34EHacrFFkTpY9t4EtO+QcdJP/z/hT8EAv4CTAUY/mv9dsXubGHAaj666666666666666666666666666666666666666666666666666666666666666666666666666/7Q/pCgQ6bDF7j6AxjLxEzfQWsjAAEAhgABA/0PiAxudD0kADCacSbU0BYxroMEpZGs0Y5KX7//8PBH1IhJiEzGYhGDDv0h/b8JhDjREF0oGW80ICnf/4PLB5UADSGVLgKjprvB0vkUH05xK7XgQYQEXrgyIEWtbegFGDUI11111111111111111111111111111111111114AAAABZQA5iIhAav///D0UAAVefJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJwhDQACBmOcxzHMcxzGOb4AHIHVRwMWGCNCp2v//M/FdR4sdzqSYJxxVVnwAtByO5toNhEyMNYH73+BL8y7xwzkf74YuRsBMu/wHoUtJQFSMBf/8nvuXGYAEQW4iTH0TgBEX1Xn///qtAwuZIIGhO281JxN8wL8JIlBwkhZf+9/5l7hbJ364AAA3/ef/+HhelhqjJDABgckBYAW7/g++///+DJD8nJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXgAAAABZQARgiIQGr///w9FAAFXnycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJyddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddeAAAAAAWUAFUIiEBq///8PRQABV58nJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXgAAAAAFlABhiIhAav///D0UAAVefJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJ11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111114A="
class Receiver():
    def __init__(self, frame_width, frame_height, channelName):
        self.p = subprocess.Popen(
            ["C:/Users/farha/amazonkvswebrtc2/build/samples/kvsWebrtcClientViewerGstSample", channelName, "video-only"],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        self.ffmpegProcess = subprocess.Popen(ffmpeg_cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        self.FRAME_WIDTH = frame_width
        self.FRAME_HEIGHT = frame_height
        self.frame_queue = queue.Queue(maxsize=1)
        self.stop_thread = False
        self.t1 = threading.Thread(target=self.sendFrameToFFMpeg, args=(self.p.stdout, self.ffmpegProcess.stdin,))
        self.t2 = threading.Thread(target=self.getFrameFromFFMpeg, args=(self.ffmpegProcess.stdout, self.frame_queue,))
        self.t1.daemon = True
        self.t2.daemon = True
        self.t1.start()
        self.t2.start()

    def stop(self):
        print("stopping receiver object")
        self.stop_thread = True
        self.t1.join(timeout=2)
        self.t2.join(timeout=2)
        print("both threads exited")
        self.p.terminate()
        self.ffmpegProcess.terminate()
        print("kvs process terminated")



    def sendFrameToFFMpeg(self, out, ffmpegIn):
        print("doing first one")
        video_data = bytearray(base64.b64decode(initialFrame))
        ffmpegIn.write(video_data)  # Write stream content to the pipe
        ffmpegIn.flush()
        print("doing next")
        while True:
            if self.stop_thread:
                print("exiting from thread1")
                break
            line = out.readline().strip()
            if line.find("Received frame:") != -1:
                frameBase64_ = line.split(":")[1]
                # print("thread1: " + frameBase64_)
                video_data = bytearray(base64.b64decode(frameBase64_))
                ffmpegIn.write(video_data)  # Write stream content to the pipe
                ffmpegIn.flush()

    def getFrameFromFFMpeg(self, ffmpegOut, frameq):
        while True:
            if self.stop_thread:
                print("exiting from thread2")
                break
            # print("thread2: waiting for frame bytes")
            frame_bytes_ = ffmpegOut.read(self.FRAME_HEIGHT * self.FRAME_WIDTH * 3)
            # ffmpegOut.flush()
            if frame_bytes_ is not None:
                # print("thread2: got frame_bytes")
                frame_ = numpy.frombuffer(frame_bytes_, numpy.uint8).reshape([self.FRAME_HEIGHT, self.FRAME_WIDTH, 3])
                if frameq.full():
                    with frameq.mutex:
                        frameq.queue.clear()
                frameq.put(frame_)

